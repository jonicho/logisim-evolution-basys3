Adds a Timer component

diff --git a/src/main/java/com/cburch/logisim/std/Builtin.java b/src/main/java/com/cburch/logisim/std/Builtin.java
index e1be1ed06..cdb3a9d24 100644
--- a/src/main/java/com/cburch/logisim/std/Builtin.java
+++ b/src/main/java/com/cburch/logisim/std/Builtin.java
@@ -19,6 +19,7 @@ import com.cburch.logisim.std.gates.GatesLibrary;
 import com.cburch.logisim.std.hdl.HdlLibrary;
 import com.cburch.logisim.std.io.IoLibrary;
 import com.cburch.logisim.std.io.extra.ExtraIoLibrary;
+import com.cburch.logisim.std.jonichoBasys3EditionLib.JonichoBasys3EditionLibrary;
 import com.cburch.logisim.std.memory.MemoryLibrary;
 import com.cburch.logisim.std.plexers.PlexersLibrary;
 import com.cburch.logisim.std.tcl.TclLibrary;
@@ -56,7 +57,8 @@ public class Builtin extends Library {
             new TclLibrary(),
             new BfhLibrary(),
             new ExtraIoLibrary(),
-            new Soc());
+            new Soc(),
+            new JonichoBasys3EditionLibrary());
   }
 
   @Override
diff --git a/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/JonichoBasys3EditionLibrary.java b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/JonichoBasys3EditionLibrary.java
new file mode 100644
index 000000000..b02d4df96
--- /dev/null
+++ b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/JonichoBasys3EditionLibrary.java
@@ -0,0 +1,41 @@
+package com.cburch.logisim.std.jonichoBasys3EditionLib;
+
+import static com.cburch.logisim.std.Strings.S;
+
+import java.util.List;
+
+import com.cburch.logisim.tools.FactoryDescription;
+import com.cburch.logisim.tools.Library;
+import com.cburch.logisim.tools.Tool;
+
+public class JonichoBasys3EditionLibrary extends Library {
+  /**
+   * Unique identifier of the library, used as reference in project files. Do NOT
+   * change as it will
+   * prevent project files from loading.
+   *
+   * <p>
+   * Identifier value must MUST be unique string among all libraries.
+   */
+  public static final String _ID = "JonichoBasys3Edition";
+
+  private static final FactoryDescription[] DESCRIPTIONS = {
+      new FactoryDescription(Timer.class, S.getter("timerComponent"), "timer.gif"),
+  };
+
+  private List<Tool> tools = null;
+
+  @Override
+  public String getDisplayName() {
+    return "Jonicho Basys3 Edition";
+  }
+
+  @Override
+  public List<Tool> getTools() {
+    if (tools == null) {
+      tools = FactoryDescription.getTools(JonichoBasys3EditionLibrary.class, DESCRIPTIONS);
+    }
+    return tools;
+  }
+
+}
diff --git a/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/Timer.java b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/Timer.java
new file mode 100644
index 000000000..c85f77867
--- /dev/null
+++ b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/Timer.java
@@ -0,0 +1,203 @@
+package com.cburch.logisim.std.jonichoBasys3EditionLib;
+
+import static com.cburch.logisim.std.Strings.S;
+
+import java.awt.Color;
+
+import com.cburch.logisim.data.Attribute;
+import com.cburch.logisim.data.AttributeOption;
+import com.cburch.logisim.data.Attributes;
+import com.cburch.logisim.data.BitWidth;
+import com.cburch.logisim.data.Bounds;
+import com.cburch.logisim.data.Value;
+import com.cburch.logisim.instance.Instance;
+import com.cburch.logisim.instance.InstanceData;
+import com.cburch.logisim.instance.InstanceFactory;
+import com.cburch.logisim.instance.InstancePainter;
+import com.cburch.logisim.instance.InstanceState;
+import com.cburch.logisim.instance.Port;
+import com.cburch.logisim.instance.StdAttr;
+import com.cburch.logisim.prefs.AppPreferences;
+import com.cburch.logisim.std.memory.ClockState;
+import com.cburch.logisim.util.GraphicsUtil;
+
+public class Timer extends InstanceFactory {
+  /**
+   * Unique identifier of the tool, used as reference in project files.
+   * Do NOT change as it will prevent project files from loading.
+   *
+   * Identifier value must MUST be unique string among all tools.
+   */
+  public static final String _ID = "Timer";
+
+  public static final int PORT_CLK = 0;
+  public static final int PORT_DUR = 1;
+  public static final int PORT_SET = 2;
+  public static final int PORT_RST = 3;
+  public static final int PORT_OUT = 4;
+
+  private static class StateData extends ClockState implements InstanceData {
+    private long startTimeNanos = 0;
+    private long durationNanos = 0;
+
+    private void reset() {
+      startTimeNanos = 0;
+      durationNanos = 0;
+    }
+
+    private void start(long durationNanos) {
+      startTimeNanos = System.nanoTime();
+      this.durationNanos = durationNanos;
+    }
+
+    private long getRemainingTime() {
+      if (startTimeNanos == 0) {
+        return 0;
+      }
+      return Math.max(durationNanos - (System.nanoTime() - startTimeNanos), 0);
+    }
+
+    private long getElapsedTime() {
+      return System.nanoTime() - startTimeNanos;
+    }
+  }
+
+  public static final AttributeOption UNIT_US = new AttributeOption("µs", S.getter("µs"));
+  public static final AttributeOption UNIT_MS = new AttributeOption("ms", S.getter("ms"));
+  public static final AttributeOption UNIT_S = new AttributeOption("s", S.getter("s"));
+  public static final Attribute<AttributeOption> ATTR_UNIT = Attributes.forOption("unit", S.getter("timerUnitAttr"),
+      new AttributeOption[] { UNIT_US, UNIT_MS, UNIT_S });
+
+  public Timer() {
+    super(_ID, S.getter("timerComponent"), new TimerHDLGeneratorFactory(), true, false);
+    setOffsetBounds(Bounds.create(0, 0, 100, 90));
+    setAttributes(
+        new Attribute[] {
+            StdAttr.WIDTH,
+            ATTR_UNIT,
+            StdAttr.EDGE_TRIGGER,
+            StdAttr.LABEL,
+            StdAttr.LABEL_FONT,
+            StdAttr.LABEL_VISIBILITY
+        },
+        new Object[] {
+            BitWidth.create(16),
+            UNIT_MS,
+            StdAttr.TRIG_RISING,
+            "",
+            StdAttr.DEFAULT_LABEL_FONT,
+            true
+        });
+  }
+
+  @Override
+  public void paintInstance(InstancePainter painter) {
+    final var g = painter.getGraphics();
+    final var bounds = painter.getBounds();
+    final var data = (StateData) painter.getData();
+    final var unit = painter.getAttributeValue(ATTR_UNIT).toString();
+    final var remainingTime = data == null ? 0 : data.getRemainingTime();
+    final String remainingTimeStr = switch (unit) {
+      case "µs" -> String.format("%d µs", remainingTime / 1_000);
+      case "ms" -> String.format("%d ms", remainingTime / 1_000_000);
+      case "s" -> String.format("%.3f s", remainingTime / 1_000_000_000.0);
+      default -> throw new UnsupportedOperationException("Unsupported unit: " + unit);
+    };
+    final var duration = data == null ? 0 : data.durationNanos;
+    final String durationStr = switch (unit) {
+      case "µs" -> String.format("%d µs", duration / 1_000);
+      case "ms" -> String.format("%d ms", duration / 1_000_000);
+      case "s" -> String.format("%d s", duration / 1_000_000_000);
+      default -> throw new UnsupportedOperationException("Unsupported unit: " + unit);
+    };
+    g.setColor(new Color(AppPreferences.COMPONENT_COLOR.get()));
+    painter.drawLabel();
+    painter.drawBounds();
+    painter.drawPorts();
+    GraphicsUtil.drawText(g, "Duration", bounds.getX() + 5, bounds.getY() + 10, GraphicsUtil.H_LEFT,
+        GraphicsUtil.V_CENTER_OVERALL);
+    GraphicsUtil.drawText(g, "Set", bounds.getX() + 5, bounds.getY() + 20, GraphicsUtil.H_LEFT,
+        GraphicsUtil.V_CENTER_OVERALL);
+    painter.drawClockSymbol(bounds.getX(), bounds.getY() + 30);
+    GraphicsUtil.drawText(g, "Out", bounds.getX() - 5 + bounds.getWidth(), bounds.getY() + 10, GraphicsUtil.H_RIGHT,
+        GraphicsUtil.V_CENTER_OVERALL);
+        g.setColor(new Color(AppPreferences.COMPONENT_SECONDARY_COLOR.get()));
+    GraphicsUtil.drawText(g, "R", bounds.getCenterX(), bounds.getY() + bounds.getHeight(), GraphicsUtil.H_CENTER,
+        GraphicsUtil.V_BOTTOM);
+    g.setColor(Color.LIGHT_GRAY);
+    g.fillRect(bounds.getX() + 10, bounds.getY() + 35, bounds.getWidth() - 20, 35);
+    g.setColor(new Color(AppPreferences.COMPONENT_COLOR.get()));
+    GraphicsUtil.drawText(g, durationStr, bounds.getCenterX(), bounds.getY() + 45,
+        GraphicsUtil.H_CENTER,
+        GraphicsUtil.V_CENTER_OVERALL);
+    GraphicsUtil.drawText(g, remainingTimeStr, bounds.getCenterX(), bounds.getY() + 60,
+        GraphicsUtil.H_CENTER,
+        GraphicsUtil.V_CENTER_OVERALL);
+  }
+
+  @Override
+  public void propagate(InstanceState state) {
+    final var data = getStateData(state);
+    final var triggerType = state.getAttributeValue(StdAttr.EDGE_TRIGGER);
+    final var triggered = data.updateClock(state.getPortValue(PORT_CLK), triggerType);
+    if (state.getPortValue(PORT_RST) == Value.TRUE) {
+      data.reset();
+      state.setPort(PORT_OUT, Value.FALSE, 1);
+    } else if (triggered) {
+      if (state.getPortValue(PORT_SET) == Value.TRUE) {
+        final var unit = state.getAttributeValue(ATTR_UNIT).toString();
+        final var durationInput = state.getPortValue(PORT_DUR).toLongValue();
+        final var durationNanos = switch (unit) {
+          case "µs" -> durationInput * 1_000;
+          case "ms" -> durationInput * 1_000_000;
+          case "s" -> durationInput * 1_000_000_000;
+          default -> throw new UnsupportedOperationException("Unsupported unit: " + unit);
+        };
+        data.start(durationNanos);
+        state.setPort(PORT_OUT, Value.FALSE, 1);
+      } else {
+        final var elapseTime = data.getElapsedTime();
+        if (data.durationNanos != 0 && elapseTime >= data.durationNanos) {
+          state.setPort(PORT_OUT, Value.TRUE, 1);
+          data.startTimeNanos += (elapseTime / data.durationNanos) * data.durationNanos;
+        } else {
+          state.setPort(PORT_OUT, Value.FALSE, 1);
+        }
+      }
+    }
+  }
+
+  @Override
+  protected void configureNewInstance(Instance instance) {
+    configurePorts(instance);
+    final var bounds = instance.getBounds();
+    instance.setTextField(StdAttr.LABEL, StdAttr.LABEL_FONT, bounds.getCenterX(),
+        bounds.getY() - 2, GraphicsUtil.H_CENTER, GraphicsUtil.V_BOTTOM);
+  }
+
+  private void configurePorts(Instance instance) {
+    final var bounds = instance.getBounds();
+    final var ports = new Port[5];
+    ports[PORT_CLK] = new Port(0, 30, Port.INPUT, 1);
+    ports[PORT_DUR] = new Port(0, 10, Port.INPUT, StdAttr.WIDTH);
+    ports[PORT_SET] = new Port(0, 20, Port.INPUT, 1);
+    ports[PORT_RST] = new Port(bounds.getWidth()/2, bounds.getHeight(), Port.INPUT, 1);
+    ports[PORT_OUT] = new Port(bounds.getWidth(), 10, Port.OUTPUT, 1);
+    ports[PORT_RST].setToolTip(S.getter("timerResetTip"));
+    ports[PORT_CLK].setToolTip(S.getter("timerClockTip"));
+    ports[PORT_DUR].setToolTip(S.getter("timerDurationTip"));
+    ports[PORT_SET].setToolTip(S.getter("timerSetTip"));
+    ports[PORT_OUT].setToolTip(S.getter("timerOutTip"));
+    instance.setPorts(ports);
+  }
+
+  private StateData getStateData(InstanceState state) {
+    var data = (StateData) state.getData();
+    if (data == null) {
+      data = new StateData();
+      state.setData(data);
+    }
+    return data;
+  }
+
+}
diff --git a/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/TimerHDLGeneratorFactory.java b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/TimerHDLGeneratorFactory.java
new file mode 100644
index 000000000..bb19aaf5d
--- /dev/null
+++ b/src/main/java/com/cburch/logisim/std/jonichoBasys3EditionLib/TimerHDLGeneratorFactory.java
@@ -0,0 +1,97 @@
+package com.cburch.logisim.std.jonichoBasys3EditionLib;
+
+import java.util.HashMap;
+
+import com.cburch.logisim.data.AttributeSet;
+import com.cburch.logisim.fpga.designrulecheck.Netlist;
+import com.cburch.logisim.fpga.hdlgenerator.AbstractHdlGeneratorFactory;
+import com.cburch.logisim.fpga.hdlgenerator.Hdl;
+import com.cburch.logisim.fpga.hdlgenerator.HdlParameters;
+import com.cburch.logisim.fpga.hdlgenerator.HdlPorts;
+import com.cburch.logisim.instance.Port;
+import com.cburch.logisim.util.LineBuffer;
+
+public class TimerHDLGeneratorFactory extends AbstractHdlGeneratorFactory {
+  private static final String NR_OF_BITS_STRING = "nrOfBits";
+  private static final int NR_OF_BITS_ID = -1;
+  private static final String CLOCKS_PER_UNIT_STRING = "clocksPerUnit";
+  private static final int CLOCKS_PER_UNIT_ID = -2;
+
+  public TimerHDLGeneratorFactory() {
+    super();
+    myParametersList
+        .add(NR_OF_BITS_STRING, NR_OF_BITS_ID)
+        .add(CLOCKS_PER_UNIT_STRING, CLOCKS_PER_UNIT_ID, HdlParameters.MAP_ATTRIBUTE_OPTION, Timer.ATTR_UNIT,
+            new HashMap<>() {
+              {
+                put(Timer.UNIT_US, 100);
+                put(Timer.UNIT_MS, 100_000);
+                put(Timer.UNIT_S, 100_000_000);
+              }
+            });
+    myPorts
+        .add(Port.CLOCK, HdlPorts.getClockName(1), 1, Timer.PORT_CLK)
+        .add(Port.INPUT, "val", NR_OF_BITS_ID, Timer.PORT_DUR)
+        .add(Port.INPUT, "set", 1, Timer.PORT_SET)
+        .add(Port.INPUT, "rst", 1, Timer.PORT_RST)
+        .add(Port.OUTPUT, "done", 1, Timer.PORT_OUT);
+  }
+
+  @Override
+  public boolean isHdlSupportedTarget(AttributeSet attrs) {
+    return Hdl.isVhdl();
+  }
+
+  @Override
+  public LineBuffer getModuleFunctionality(Netlist netlist, AttributeSet attrs) {
+    if (!Hdl.isVhdl()) {
+      throw new UnsupportedOperationException("Only VHDL is supported");
+    }
+    final var contents = LineBuffer.getBuffer()
+        .pair("clock", HdlPorts.getClockName(1))
+        .pair("tick", HdlPorts.getTickName(1))
+        .pair("clocks_per_unit", String.valueOf(CLOCKS_PER_UNIT_STRING));
+    contents.empty().addVhdlKeywords();
+    contents.add("""
+        {{process}} ({{clock}}, rst) {{is}}
+          {{variable}} duration : unsigned(nrOfBits - 1 downto 0) := (others => '0');
+          {{variable}} counter : unsigned(nrOfBits - 1 downto 0) := (others => '0');
+          {{variable}} unit_counter : integer range {{clocks_per_unit}} - 1 downto 0 := 0;
+          {{variable}} should_done : boolean := false;
+        {{begin}}
+          {{if}} rst = '1' {{then}}
+            counter := (others => '0');
+            duration := (others => '0');
+            unit_counter := 0;
+            done <= '0';
+            should_done := false;
+          {{elsif}} rising_edge({{clock}}) {{then}}
+            unit_counter := unit_counter + 1;
+            {{if}} unit_counter = {{clocks_per_unit}} - 1 {{then}}
+              unit_counter := 0;
+              counter := counter + 1;
+            {{end}} {{if}};
+            {{if}} counter = duration {{then}}
+              should_done := true;
+              counter := (others => '0');
+            {{end}} {{if}};
+            {{if}} {{tick}} = '1' {{then}}
+              {{if}} set = '1' {{then}}
+                counter := (others => '0');
+                duration := unsigned(val);
+                unit_counter := 0;
+                done <= '0';
+                should_done := false;
+              {{elsif}} duration /= 0 {{and}} should_done {{then}}
+                done <= '1';
+                should_done := false;
+              {{else}}
+                done <= '0';
+              {{end}} {{if}};
+            {{end}} {{if}};
+          {{end}} {{if}};
+        {{end}} {{process}};
+        """);
+    return contents;
+  }
+}
diff --git a/src/main/resources/resources/logisim/default.templ b/src/main/resources/resources/logisim/default.templ
index 492d488ed..c259b229d 100644
--- a/src/main/resources/resources/logisim/default.templ
+++ b/src/main/resources/resources/logisim/default.templ
@@ -13,6 +13,7 @@
  <lib name="9" desc="#BFH-Praktika" />
  <lib name="B" desc="#Input/Output-Extra" />
  <lib name="C" desc="#Soc" />
+ <lib name="JonichoBasys3Edition" desc="#JonichoBasys3Edition" />
 
  <options>
   <a name="showgrid" val="true" />
diff --git a/src/main/resources/resources/logisim/strings/std/std.properties b/src/main/resources/resources/logisim/strings/std/std.properties
index 433268988..259e80da7 100644
--- a/src/main/resources/resources/logisim/strings/std/std.properties
+++ b/src/main/resources/resources/logisim/strings/std/std.properties
@@ -624,6 +624,16 @@ randomResetTip = Clear: When 1, resets to initial seed asynchronously
 randomSeedAttr = Seed
 randomWidthLabel = Width: %d
 #
+# memory/Timer.java
+#
+timerComponent = Timer
+timerResetTip = Reset: when 1, resets asynchronously
+timerClockTip = Clock: timer may start on trigger
+timerDurationTip = Duration: duration to set timer to, 0 to deactivate timer
+timerSetTip = Set: when 1, starts timer on clock trigger
+timerOutTip = Out: 1 for one clock cycle when timer reached 0
+timerUnitAttr = Time Unit
+#
 # memory/Register.java
 #
 registerClkTip = Clock: value updates on trigger
